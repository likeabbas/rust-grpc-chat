syntax = "proto3";

package chat;

import "google/protobuf/timestamp.proto";

option go_package="github.com/rodaine/grpc-chat/protos";
option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "ChatProto";

service Chat {
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  rpc Stream(stream StreamRequest) returns (stream StreamResponse) {}
}

// Todo
// If password is there & username exist in database, check if password matches salt and if it does, then authenticate the user
// if password is there & username doesn't exist in database, send back an "Account Created" something.
// else if username exist in database and password don't match, send back unauthenticated
// else if username doesn't exist in database & username doesn't exist in current chat members & password not there, auth user for just this session
message LoginRequest {
  string username = 1;
  string user_password = 2;
  string server_password = 3;
}

message LoginResponse {
  string token = 1;
  repeated ReceiverMessage recent_messages = 2;
}

message LogoutRequest {
  string token = 1;
}

message LogoutResponse {}

message SenderMessage {
  string content = 1;
}

message ReceiverMessage {
  string username = 1;
  string content  = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message StreamRequest {
  oneof event {
    SenderMessage send_message = 1;
    End  end_chat     = 2;
  }

  message Send {
    string content = 1;
  }

  message End {
    string token = 1;
  }
}

message StreamResponse {
  oneof event {
    Login    client_login    = 2;
    Logout   client_logout   = 3;
    ReceiverMessage  client_message  = 4;
    Shutdown server_shutdown = 5;
  }

  message Login {
    string username = 1;
  }

  message Logout {
    string username = 1;
  }

  message Shutdown {}
}